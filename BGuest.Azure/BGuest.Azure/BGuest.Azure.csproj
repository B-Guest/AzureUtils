<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{72E63067-613B-4B3E-9EDE-2491E06F348D}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>BGuest.Azure</RootNamespace>
    <AssemblyName>BGuest.Azure</AssemblyName>
    <TargetFrameworkVersion>v4.6.1</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <PowerShellBuildEnabled>true</PowerShellBuildEnabled>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup>
    <InlineTaskVersionDep Condition="'$(MSBuildToolsVersion)' == '12'">v$(MSBuildToolsVersion)</InlineTaskVersionDep>
    <InlineTaskVersionDep Condition="'$(MSBuildToolsVersion)' == '14'">Core</InlineTaskVersionDep>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Configuration" />
    <Reference Include="System.Core" />
    <Reference Include="System.Xml.Linq" />
    <Reference Include="System.Data.DataSetExtensions" />
    <Reference Include="Microsoft.CSharp" />
    <Reference Include="System.Data" />
    <Reference Include="System.Net.Http" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="Configuration\WebJobConfigurationManager.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
  </ItemGroup>
  <ItemGroup>
    <None Include="BGuest.Azure.nuspec" />
    <InvokeAfter Include="Pack.ps1" />
  </ItemGroup>
  <ItemGroup Label="InvokeBeforeAfter">
    <AvailableItemName Include="InvokeAfter">
      <Visible>false</Visible>
    </AvailableItemName>
    <AvailableItemName Include="InvokeBefore">
      <Visible>false</Visible>
    </AvailableItemName>
  </ItemGroup>
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
  <UsingTask TaskName="InvokePowerShell" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.$(InlineTaskVersionDep).dll" TaskFactory="CodeTaskFactory">
    <ParameterGroup>
      <ScriptFile ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="Microsoft.Build" />
      <Reference Include="System.Management.Automation" />
      <Reference Include="System.Xml" />
      <Using Namespace="System.Management.Automation" />
      <Using Namespace="System.Management.Automation.Runspaces" />
      <Using Namespace="Microsoft.Build.Evaluation" />
      <Code Type="Fragment" Language="cs"><![CDATA[
        if (!ScriptFile.ToLower().EndsWith(".ps1")) return true;
        var envdir = Environment.CurrentDirectory;
        BuildEngine.LogMessageEvent(new BuildMessageEventArgs("Executing with PowerShell: " + ScriptFile, "", "", MessageImportance.High));
        Project project = ProjectCollection.GlobalProjectCollection.GetLoadedProjects(BuildEngine.ProjectFileOfTaskNode).FirstOrDefault()
            ?? new Project(BuildEngine.ProjectFileOfTaskNode);
        if (!ScriptFile.Contains(":") && !ScriptFile.StartsWith("\\\\"))
            ScriptFile = project.DirectoryPath + "\\" + ScriptFile;
        var pwd = Directory.GetParent(ScriptFile).FullName;
        var runspaceConfig = RunspaceConfiguration.Create();
        using (Runspace runspace = RunspaceFactory.CreateRunspace(runspaceConfig)) 
        { 
            runspace.Open();
            var vars = new System.Text.StringBuilder();
            foreach (ProjectProperty evaluatedProperty in project.AllEvaluatedProperties)
            {
                var name = evaluatedProperty.Name;
                var value = evaluatedProperty.EvaluatedValue;
                if (!string.IsNullOrWhiteSpace(name) && !string.IsNullOrWhiteSpace(value))
                {
                    if (value.ToLower() == "true" || value.ToLower() == "false") {
                        vars.AppendLine("$" + name + " = $" + value);
                    } else {
                        vars.AppendLine("$" + name + " = @\"\r\n" + value.Replace("\"", "\"\"") + "\r\n\"@");
                    }
                }
            }
            using (RunspaceInvoke scriptInvoker = new RunspaceInvoke(runspace)) 
            { 
                using (Pipeline pipeline = runspace.CreatePipeline()) {
                    scriptInvoker.Invoke(vars.ToString()); 
                    scriptInvoker.Invoke("cd \"" + pwd + "\"");
                    var fileName = ScriptFile.Substring(project.DirectoryPath.Length + 1);
                    pipeline.Commands.AddScript("& \"" + ScriptFile + "\""); 
                    try {
                        var results = pipeline.Invoke();
                        var sbout = new StringBuilder();
                        foreach (var result in results)
                        {
                            sbout.AppendLine(result.ToString());
                        }
                        BuildEngine.LogMessageEvent(new BuildMessageEventArgs(sbout.ToString(), "", "", MessageImportance.High));
                    } catch (Exception e) {
                        BuildEngine.LogErrorEvent(new BuildErrorEventArgs("", "", ScriptFile, 0, 0, 0, 0, e.ToString(), "", "", DateTime.Now));
                        throw;
                    }
                }
            } 
        }
        Environment.CurrentDirectory = envdir;
        return true;
    ]]></Code>
    </Task>
  </UsingTask>
  <Target Name="PSScriptsBefore" BeforeTargets="Build">
    <InvokePowerShell ScriptFile="%(InvokeBefore.Identity)" Condition="'@(InvokeBefore)' != ''" />
  </Target>
  <Target Name="PSScriptsAfter" AfterTargets="Build">
    <InvokePowerShell ScriptFile="%(InvokeAfter.Identity)" Condition="'@(InvokeAfter)' != ''" />
  </Target>
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
</Project>